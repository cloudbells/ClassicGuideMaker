<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/
..\FrameXML\UI.xsd">
    <Font name="WOTLKCFontTemplate" font="Fonts/FRIZQT__.ttf" outline="NORMAL" justifyH="LEFT" virtual="true">
        <FontHeight>
            <AbsValue val="12" />
        </FontHeight>
    </Font>
    <Frame name="WOTLKCBackgroundFrameTemplate" virtual="true">
        <Layers>
            <Layer level="BACKGROUND">
                <Texture parentKey="background" setAllPoints="true">
                    <Color r="0" g="0" b="0" />
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad inherit="prepend">
                self.SetBackgroundColor = function(self, r, g, b, a)
                    self.background:SetColorTexture(r, g, b, a)
                end
                self.ResetBackgroundColor = function(self)
                    self:SetBackgroundColor(0, 0, 0, 1)
                end
            </OnLoad>
        </Scripts>
    </Frame>
    <Frame name="WOTLKCBorderedFrameTemplate" virtual="true">
        <Layers>
            <Layer level="BORDER">
                <Texture parentKey="top">
                    <Size x="1" y="1" />
                    <Color r="1" g="1" b="1" a="1" />
                    <Anchors>
                        <Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" x="-1" />
                        <Anchor point="BOTTOMRIGHT" relativePoint="TOPRIGHT" x="1" />
                    </Anchors>
                </Texture>
                <Texture parentKey="right">
                    <Size x="1" y="1" />
                    <Color r="1" g="1" b="1" a="1" />
                    <Anchors>
                        <Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" y="-1" />
                        <Anchor point="TOPLEFT" relativePoint="TOPRIGHT" y="1" />
                    </Anchors>
                </Texture>
                <Texture parentKey="bottom">
                    <Size x="1" y="1" />
                    <Color r="1" g="1" b="1" a="1" />
                    <Anchors>
                        <Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" x="-1" />
                        <Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" x="1" />
                    </Anchors>
                </Texture>
                <Texture parentKey="left">
                    <Size x="1" y="1" />
                    <Color r="1" g="1" b="1" a="1" />
                    <Anchors>
                        <Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMLEFT" y="-1" />
                        <Anchor point="TOPRIGHT" relativePoint="TOPLEFT" y="1" />
                    </Anchors>
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad inherit="prepend">
                self.SetBorderColor = function(self, r, g, b, a)
                    self.top:SetColorTexture(r, g, b, a)
                    self.right:SetColorTexture(r, g, b, a)
                    self.bottom:SetColorTexture(r, g, b, a)
                    self.left:SetColorTexture(r, g, b, a)
                end
                self.ResetBorderColor = function(self)
                    self:SetBorderColor(1, 1, 1)
                end
            </OnLoad>
        </Scripts>
    </Frame>
    <Frame name="WOTLKCHighlightFrameTemplate" virtual="true">
        <Layers>
            <Layer level="HIGHLIGHT">
                <Texture parentKey="highlight" setAllPoints="true" hidden="true">
                    <Color r="1" g="1" b="1" a="0.3" />
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad inherit="prepend">
                self.SetHighlightColor = function(self, r, g, b, a)
                    self.highlight:SetColorTexture(r, g, b, a)
                end
                self.ResetHighlightColor = function(self)
                    self:SetHighlightColor(1, 1, 1, 0.3)
                end
            </OnLoad>
            <OnEnter inherit="prepend">
                self.highlight:Show()
            </OnEnter>
            <OnLeave inherit="prepend">
                self.highlight:Hide()
            </OnLeave>
        </Scripts>
    </Frame>
    <Frame name="WOTLKCPushableFrameTemplate" virtual="true">
        <Layers>
            <Layer level="HIGHLIGHT">
                <Texture parentKey="push" setAllPoints="true" hidden="true">
                    <Color r="1" g="1" b="1" a="0.6" />
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad inherit="prepend">
                self.SetPushColor = function(self, r, g, b, a)
                    self.push:SetColorTexture(r, g, b, a)
                end
                self.ResetPushColor = function(self)
                    self:SetPushColor(1, 1, 1, 0.6)
                end
            </OnLoad>
            <OnMouseDown inherit="prepend">
                if self.highlight then
                    self.highlight:Hide()
                end
                self.push:Show()
            </OnMouseDown>
            <OnMouseUp inherit="prepend">
                self.push:Hide()
                if self.highlight then
                    self.highlight:Show()
                end
            </OnMouseUp>
        </Scripts>
    </Frame>
    <Frame name="WOTLKCTogglableFrameTemplate" virtual="true">
        <Scripts>
            <OnLoad inherit="prepend">
                self.IsShowing = function(self)
                    return self.isShowing
                end
                self.Toggle = function(self)
                    if self.isShowing then
                        self:Hide()
                    else
                        self:Show()
                    end
                end
            </OnLoad>
            <OnShow inherit="prepend">
                self.isShowing = true
            </OnShow>
            <OnHide inherit="prepend">
                self.isShowing = false
            </OnHide>
        </Scripts>
    </Frame>
</Ui>
